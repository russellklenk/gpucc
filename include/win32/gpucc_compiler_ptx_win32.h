#ifndef __GPUCC_COMPILER_PTX_WIN32_H__
#define __GPUCC_COMPILER_PTX_WIN32_H__

#pragma once

#ifndef GPUCC_NO_INCLUDES
#   ifndef __GPUCC_PTXCOMPILERAPI_WIN32_H__
#       include "win32/ptxcompilerapi_win32.h"
#   endif
#endif

/* @summary Cast a GPUCC_PROGRAM_COMPILER* to a GPUCC_COMPILER_PTX_WIN32*.
 */
#ifndef gpuccCompilerPtx_
#define gpuccCompilerPtx_(_c)                                                  \
    ((GPUCC_COMPILER_PTX_WIN32*)(_c))
#endif

/* @summary Cast a GPUCC_PROGRAM_BYTECODE* to a GPUCC_BYTECODE_PTX_WIN32*.
 */
#ifndef gpuccBytecodePtx_
#define gpuccBytecodePtx_(_b)                                                  \
    ((GPUCC_BYTECODE_PTX_WIN32*)(_b))
#endif

/* @summary Define the maximum number of arguments that can be passed to the ptx compiler.
 * The list of supported arguments can be found at:
 * https://docs.nvidia.com/cuda/nvrtc/index.html#group__options
 */
#ifndef GPUCC_COMPILER_PTX_WIN32_MAX_ARGS
#define GPUCC_COMPILER_PTX_WIN32_MAX_ARGS                                    128 
#endif

/* @summary Define the data maintained by an instance of the ptx compiler utilizing nvrtc.
 * This compiler type can emit bytecode for CUDA kernels to run on nVidia GPUs.
 */
typedef struct GPUCC_COMPILER_PTX_WIN32 {
    GPUCC_PROGRAM_COMPILER_BASE   CommonFields;                                /* This must be the first field of any compiler type. */
    PTXCOMPILERAPI_DISPATCH      *DispatchTable;                               /* A pointer to the nvrtc64 dispatch table maintained by the process context. */
    int32_t                       TargetRuntime;                               /* One of the values of the GPUCC_TARGET_RUNTIME enumeration specifying the target runtime for shaders built by the compiler. */
    uint32_t                      DefineCount;                                 /* The number of items in the DefineArray. */
    char                        **DefineArray;                                 /* An array of pointers to nul-terminated strings of the form -D symbol<=value>. */
    char                         *GpuArchitecture;                             /* A string of the form compute_## where ## specifies the CUDA compute version. */
    char const                  **ClArguments;                                 /* An array of nul-terminated string arguments passed to the compiler. */
    uint32_t                      ArgumentCount;                               /* The number of items in the ClArguments array. */
} GPUCC_COMPILER_PTX_WIN32;

/* @summary Define the data maintained by a single CUDA program bytecode container generated by the ptx compiler.
 */
typedef struct GPUCC_BYTECODE_PTX_WIN32 {
    GPUCC_PROGRAM_BYTECODE_BASE   CommonFields;                                /* This must be the first field of any bytecode container type. */
    uint8_t                      *CodeBuffer;                                  /* A buffer, separate from the program object, containing the compiled bytecode. */
    char                         *LogBuffer;                                   /* A buffer, separate from the program object, containing the compilation log. */
} GPUCC_BYTECODE_PTX_WIN32;

#ifdef __cplusplus
extern "C" {
#endif

/* @summary Allocate and initialize a bytecode container for PTX bytecode generated by the CUDA runtime compiler.
 * @param compiler A pointer to an instance of GPUCC_COMPILER_PTX_WIN32.
 * @return A pointer to the bytecode container, of type GPUCC_BYTECODE_PTX_WIN32, or NULL if the allocation failed.
 */
GPUCC_API(struct GPUCC_PROGRAM_BYTECODE*)
gpuccCreateProgramBytecodePtx
(
    struct GPUCC_PROGRAM_COMPILER *compiler
);

/* @summary Release all resources associated with a PTX program bytecode container.
 * @param bytecode A pointer to an instance of GPUCC_BYTECODE_PTX_WIN32.
 */
GPUCC_API(void)
gpuccDeleteProgramBytecodePtx
(
    struct GPUCC_PROGRAM_BYTECODE *bytecode
);

/* @summary Compile GPU program source code into intermediate bytecode using the PTX compiler.
 * The caller is responsible for processing any source code includes and supplying the full resulting source code in the source_code buffer.
 * The function blocks the calling thread until compilation has completed.
 * @param container The container that will be used to store the program bytecode, of type GPUCC_BYTECODE_PTX_WIN32.
 * @param source_code Pointer to a buffer containing UTF-8 encoded GPU program source code.
 * @param source_size The number of bytes of program source code in the spurce_code buffer.
 * @oaram source_path A nul-terminated UTF-8 string specifying the path to the source file, for use in log output. This value may be NULL.
 * @param entry_point A nul-terminated string specifying the program entry point.
 * @return The result of the compilation. Use the gpuccSuccess and gpuccFailure macros to determine whether compilation was successful.
 */
GPUCC_API(struct GPUCC_RESULT)
gpuccCompileBytecodePtx
(
    struct GPUCC_PROGRAM_BYTECODE *container, 
    char const                  *source_code, 
    uint64_t                     source_size, 
    char const                  *source_path, 
    char const                  *entry_point
);

/* @summary Allocate and initialize a new compiler record for accessing the PTX compiler.
 * @param config Data used to configure the compiler instance.
 * @return A pointer to the compiler, or NULL if an error occurred.
 */
GPUCC_API(struct GPUCC_PROGRAM_COMPILER*)
gpuccCreateCompilerPtx
(
    struct GPUCC_PROGRAM_COMPILER_INIT *config
);

#ifdef __cplusplus
}; /* extern "C" */
#endif

#endif



